#include <iostream>
using namespace std;

class Interface {
public:
    virtual double getArea()
    const = 0;
};

class Circle : public Interface {
private:
    const double radius;

public:
    Circle(double r) : radius(r) {}

    double getArea() const override {
        return 3.14 * radius * radius;
    }
};
int main() {

    const Circle circle(5);

    double area = circle.getArea();
    cout << "Circle's area : " << area << endl;

    return 0;
}
#include <iostream>

using namespace std;

class Figure_Area {
public:
    virtual float Area() = 0;
    
};

class Rectangle:public Figure_Area {
private:
    int x,y;
    
public:
    Rectangle (int x, int y){
        this->x=x;
        this->y=y;

    }
    float Area() override {
        return (x*y);
    }
};

class Triangle:public Figure_Area {
private:
    int x,y;
    
public:
Triangle (int x, int y){
        this->x=x;
        this->y=y;
    float Area() override {
        return (x*y)/2.0;
    }
};

int main() {
    Rectangle rectangle;
    Triangle triangle;

    rectangle.Hight(5);
    rectangle.Base(2);

    triangle.Hight(1);
    triangle.Base(5);

    cout << rectangle.Area() << endl;
    cout <<triangle.Area() << endl;

    return 0;
}
#include <iostream>

using namespace std;

class Figure_Area {
public:
    virtual float Area() = 0;
};

class Rectangle:public Figure_Area {
private:
    int x, y;
public:
    Rectangle(int x, int y) {
        this->x = x;
        this->y = y;
    }
    float Area() override {
        return (x * y);
    }
};

class Triangle:public Figure_Area {
private:
    int x, y;
public:
    Triangle(int x, int y) {
        this->x = x;
        this->y = y;
    }
    float Area() override {
        return (x * y) / 2.0;
    }
};

int main() {
    Rectangle rectangle(5, 2);
    Triangle triangle(1, 5);

    cout << rectangle.Area() << endl;
    cout << triangle.Area() << endl;

    return 0;
}
